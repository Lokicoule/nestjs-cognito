2:I[1995,["727","static/chunks/727-307d6dc754c23268.js","985","static/chunks/985-728f8f965d873ae2.js","802","static/chunks/802-794afc6f7dd2dd66.js","823","static/chunks/app/guides/testing/page-ca37cbdc92f6871b.js"],"Heading"]
3:I[8017,["727","static/chunks/727-307d6dc754c23268.js","985","static/chunks/985-728f8f965d873ae2.js","802","static/chunks/802-794afc6f7dd2dd66.js","823","static/chunks/app/guides/testing/page-ca37cbdc92f6871b.js"],"CodeGroup"]
4:I[8017,["727","static/chunks/727-307d6dc754c23268.js","985","static/chunks/985-728f8f965d873ae2.js","802","static/chunks/802-794afc6f7dd2dd66.js","823","static/chunks/app/guides/testing/page-ca37cbdc92f6871b.js"],"Pre"]
5:I[8017,["727","static/chunks/727-307d6dc754c23268.js","985","static/chunks/985-728f8f965d873ae2.js","802","static/chunks/802-794afc6f7dd2dd66.js","823","static/chunks/app/guides/testing/page-ca37cbdc92f6871b.js"],"Code"]
12:I[9943,[],""]
13:I[249,[],""]
6:T8ee,<span><span style="color: var(--shiki-token-function)">pnpm</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">add</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">--save-dev</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">@nestjs-cognito/testing</span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)"># NestJS Cognito testing utilities</span></span>
<span><span style="color: var(--shiki-token-function)">pnpm</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">add</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">--save-dev</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">@nestjs/testing</span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-comment)"># NestJS testing utilities</span></span>
<span><span style="color: var(--shiki-token-function)">pnpm</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">add</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">--save-dev</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">jest</span><span style="color: var(--shiki-color-text)">                         </span><span style="color: var(--shiki-token-comment)"># Test runner</span></span>
<span><span style="color: var(--shiki-token-function)">pnpm</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">add</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">--save-dev</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">@types/jest</span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-comment)"># TypeScript definitions</span></span>
<span></span>7:T8fa,<span><span style="color: var(--shiki-token-function)">npm</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">install</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">--save-dev</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">@nestjs-cognito/testing</span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)"># NestJS Cognito testing utilities</span></span>
<span><span style="color: var(--shiki-token-function)">npm</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">install</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">--save-dev</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">@nestjs/testing</span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-comment)"># NestJS testing utilities</span></span>
<span><span style="color: var(--shiki-token-function)">npm</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">install</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">--save-dev</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">jest</span><span style="color: var(--shiki-color-text)">                         </span><span style="color: var(--shiki-token-comment)"># Test runner</span></span>
<span><span style="color: var(--shiki-token-function)">npm</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">install</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">--save-dev</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">@types/jest</span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-comment)"># TypeScript definitions</span></span>
<span></span>8:T8da,<span><span style="color: var(--shiki-token-function)">yarn</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">add</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">--dev</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">@nestjs-cognito/testing</span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)"># NestJS Cognito testing utilities</span></span>
<span><span style="color: var(--shiki-token-function)">yarn</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">add</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">--dev</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">@nestjs/testing</span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-comment)"># NestJS testing utilities</span></span>
<span><span style="color: var(--shiki-token-function)">yarn</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">add</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">--dev</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">jest</span><span style="color: var(--shiki-color-text)">                         </span><span style="color: var(--shiki-token-comment)"># Test runner</span></span>
<span><span style="color: var(--shiki-token-function)">yarn</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">add</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">--dev</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">@types/jest</span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-comment)"># TypeScript definitions</span></span>
<span></span>9:T1b0a,<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { handler</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> request</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> spec } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;pactum&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { Test } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@nestjs/testing&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { INestApplication } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@nestjs/common&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-token-function)">describe</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Auth Tests&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> app</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">INestApplication</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">beforeAll</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleRef</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Test</span><span style="color: var(--shiki-token-function)">.createTestingModule</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">      imports</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [AppModule]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    })</span><span style="color: var(--shiki-token-function)">.compile</span><span style="color: var(--shiki-color-text)">();</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    app </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleRef</span><span style="color: var(--shiki-token-function)">.createNestApplication</span><span style="color: var(--shiki-color-text)">();</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.init</span><span style="color: var(--shiki-color-text)">();</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Configure Pactum to use the NestJS application</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.setBaseUrl</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`http://localhost:</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">process</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">env</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">PORT</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3000</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  });</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">afterAll</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.close</span><span style="color: var(--shiki-color-text)">();</span></span>
<span><span style="color: var(--shiki-color-text)">  });</span></span>
<span><span style="color: var(--shiki-color-text)">});</span></span>
<span></span>a:T24d4,<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { Module } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@nestjs/common&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { ConfigModule</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ConfigService } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@nestjs/config&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { CognitoTestingModule } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@nestjs-cognito/testing&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { CognitoAuthModule } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@nestjs-cognito/auth&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">  imports</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Configure auth module with environment variables</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">CognitoAuthModule</span><span style="color: var(--shiki-token-function)">.registerAsync</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">      imports</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">ConfigModule</span><span style="color: var(--shiki-token-function)">.forRoot</span><span style="color: var(--shiki-color-text)">()]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">useFactory</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> (config</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ConfigService</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> ({</span></span>
<span><span style="color: var(--shiki-color-text)">        jwtVerifier</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">          userPoolId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">config</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;COGNITO_USER_POOL_ID&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">          clientId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">config</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;COGNITO_CLIENT_ID&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">          tokenUse</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;id&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      })</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      inject</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [ConfigService]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    })</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Configure testing module with AWS credentials</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">CognitoTestingModule</span><span style="color: var(--shiki-token-function)">.registerAsync</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">      imports</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">ConfigModule</span><span style="color: var(--shiki-token-function)">.forRoot</span><span style="color: var(--shiki-color-text)">()]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">useFactory</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> (config</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ConfigService</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> ({</span></span>
<span><span style="color: var(--shiki-color-text)">        identityProvider</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">          region</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">config</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;COGNITO_REGION&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      })</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      inject</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [ConfigService]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    })</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">})</span></span>
<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TestModule</span><span style="color: var(--shiki-color-text)"> {}</span></span>
<span></span>b:T227f,<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { COGNITO_JWT_VERIFIER_INSTANCE_TOKEN } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@nestjs-cognito/core&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { CognitoTestingModule } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@nestjs-cognito/testing&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { Test } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;@nestjs/testing&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { handler</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> request</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> spec } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;pactum&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-token-function)">describe</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Auth Tests&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> app</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">INestApplication</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">beforeAll</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleFixture</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Test</span><span style="color: var(--shiki-token-function)">.createTestingModule</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">      imports</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">CognitoTestingModule</span><span style="color: var(--shiki-token-function)">.register</span><span style="color: var(--shiki-color-text)">({}</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">          enabled</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// Enable mock mode</span></span>
<span><span style="color: var(--shiki-color-text)">          user</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">            username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;test-user&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">            email</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;test@example.com&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">            groups</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;users&#39;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">          }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        })</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        AppModule</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    })</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.overrideProvider</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">COGNITO_JWT_VERIFIER_INSTANCE_TOKEN</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.useFactory</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">        factory</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CognitoTestingModule</span><span style="color: var(--shiki-color-text)">.createJwtVerifierFactory</span></span>
<span><span style="color: var(--shiki-color-text)">      })</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.compile</span><span style="color: var(--shiki-color-text)">();</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    app </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleFixture</span><span style="color: var(--shiki-token-function)">.createNestApplication</span><span style="color: var(--shiki-color-text)">();</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.init</span><span style="color: var(--shiki-color-text)">();</span></span>
<span><span style="color: var(--shiki-color-text)">  });</span></span>
<span><span style="color: var(--shiki-color-text)">});</span></span>
<span></span>c:T185f,<span><span style="color: var(--shiki-token-comment)">// Test authentication using mock service</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">request</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.getHttpServer</span><span style="color: var(--shiki-color-text)">())</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.post</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/cognito-testing-login&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.send</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;test-user&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    password</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;any-password&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// Password is not validated in mock mode</span></span>
<span><span style="color: var(--shiki-color-text)">    clientId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;mock-client-id&#39;</span></span>
<span><span style="color: var(--shiki-color-text)">  })</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.expect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Test protected routes</span></span>
<span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">request</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.getHttpServer</span><span style="color: var(--shiki-color-text)">())</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/protected&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Authorization&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`Bearer </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">body</span><span style="color: var(--shiki-color-text)">.AccessToken</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.expect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.expect</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;test-user&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    email</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;test@example.com&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    groups</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;users&#39;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  });</span></span>
<span></span>d:T25e8,<span><span style="color: var(--shiki-token-comment)">// Test group-based authorization</span></span>
<span><span style="color: var(--shiki-token-function)">describe</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Authorization Tests&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">it</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;should allow access to authorized group members&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Configure mock user with specific group</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">request</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.getHttpServer</span><span style="color: var(--shiki-color-text)">())</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.post</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/config&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.send</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">        enabled</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        user</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">          username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;admin-user&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">          email</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;admin@example.com&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">          groups</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;admin&#39;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      })</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.expect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Login and get token</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">loginResponse</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">request</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.getHttpServer</span><span style="color: var(--shiki-color-text)">())</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.post</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/cognito-testing-login&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.send</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">        username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;admin@example.com&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        password</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;password&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        clientId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;test-client&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      })</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.expect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Test protected route access</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">request</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.getHttpServer</span><span style="color: var(--shiki-color-text)">())</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/admin/dashboard&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Authorization&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`Bearer </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">loginResponse</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">body</span><span style="color: var(--shiki-color-text)">.AccessToken</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.expect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  });</span></span>
<span><span style="color: var(--shiki-color-text)">});</span></span>
<span></span>e:T185f,<span><span style="color: var(--shiki-token-comment)">// Test authentication using mock service</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">request</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.getHttpServer</span><span style="color: var(--shiki-color-text)">())</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.post</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/cognito-testing-login&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.send</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;test-user&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    password</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;any-password&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// Password is not validated in mock mode</span></span>
<span><span style="color: var(--shiki-color-text)">    clientId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;mock-client-id&#39;</span></span>
<span><span style="color: var(--shiki-color-text)">  })</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.expect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Test protected routes</span></span>
<span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">request</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.getHttpServer</span><span style="color: var(--shiki-color-text)">())</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/protected&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Authorization&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`Bearer </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">body</span><span style="color: var(--shiki-color-text)">.AccessToken</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.expect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.expect</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;test-user&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    email</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;test@example.com&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    groups</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;users&#39;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  });</span></span>
<span></span>f:T25e8,<span><span style="color: var(--shiki-token-comment)">// Test group-based authorization</span></span>
<span><span style="color: var(--shiki-token-function)">describe</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Authorization Tests&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">it</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;should allow access to authorized group members&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Configure mock user with specific group</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">request</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.getHttpServer</span><span style="color: var(--shiki-color-text)">())</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.post</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/config&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.send</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">        enabled</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        user</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">          username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;admin-user&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">          email</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;admin@example.com&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">          groups</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;admin&#39;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      })</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.expect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Login and get token</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">loginResponse</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">request</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.getHttpServer</span><span style="color: var(--shiki-color-text)">())</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.post</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/cognito-testing-login&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.send</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">        username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;admin@example.com&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        password</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;password&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        clientId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;test-client&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      })</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.expect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Test protected route access</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">request</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.getHttpServer</span><span style="color: var(--shiki-color-text)">())</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/admin/dashboard&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Authorization&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`Bearer </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">loginResponse</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">body</span><span style="color: var(--shiki-color-text)">.AccessToken</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.expect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  });</span></span>
<span><span style="color: var(--shiki-color-text)">});</span></span>
<span></span>10:Ta6f,<span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">request</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.getHttpServer</span><span style="color: var(--shiki-color-text)">())</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.post</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/config&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.send</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    user</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">      username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;new-user&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      email</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;new@example.com&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      groups</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;admin&#39;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  })</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.expect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>11:T2cf2,<span><span style="color: var(--shiki-token-function)">describe</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Token Type Tests&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">it</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;should validate ID tokens&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">request</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.getHttpServer</span><span style="color: var(--shiki-color-text)">())</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.post</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/cognito-testing-login&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.send</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">        username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;test@example.com&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        password</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;password&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        clientId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;test-client&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      })</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.expect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">request</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.getHttpServer</span><span style="color: var(--shiki-color-text)">())</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/protected&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Authorization&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`Bearer </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">body</span><span style="color: var(--shiki-color-text)">.IdToken</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.expect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  });</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">it</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;should validate access tokens&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">request</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.getHttpServer</span><span style="color: var(--shiki-color-text)">())</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.post</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/cognito-testing-login&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.send</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">        username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;test@example.com&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        password</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;password&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        clientId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;test-client&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      })</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.expect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">request</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.getHttpServer</span><span style="color: var(--shiki-color-text)">())</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/protected&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Authorization&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`Bearer </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">body</span><span style="color: var(--shiki-color-text)">.AccessToken</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">.expect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  });</span></span>
<span><span style="color: var(--shiki-color-text)">});</span></span>
<span></span>0:["AG1NeZbtIS3t-faK8XZ-V",[[["",{"children":["guides",{"children":["testing",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",{"children":["guides",{"children":["testing",{"children":["__PAGE__",{},[["$L1",["$","article",null,{"className":"flex h-full flex-col pb-10 pt-16","children":[["$","div",null,{"className":"flex-auto prose dark:prose-invert [html_:where(&>*)]:mx-auto [html_:where(&>*)]:max-w-2xl [html_:where(&>*)]:lg:mx-[calc(50%-min(50%,theme(maxWidth.lg)))] [html_:where(&>*)]:lg:max-w-3xl","children":[["$","h1",null,{"children":"Testing"}],"\n",["$","p",null,{"children":"The testing package provides comprehensive utilities and helpers for testing NestJS applications that use AWS Cognito authentication. It supports both real E2E testing with actual AWS services and mocked testing for faster development cycles."}],"\n",["$","$L2",null,{"level":2,"id":"getting-started-with-testing","children":"Getting Started with Testing"}],"\n",["$","p",null,{"children":"To begin testing your NestJS Cognito authentication, you'll need to install the required packages:"}],"\n",["$","$L3",null,{"children":[["$","$L4",null,{"language":"sh","code":"pnpm add --save-dev @nestjs-cognito/testing      # NestJS Cognito testing utilities\npnpm add --save-dev @nestjs/testing              # NestJS testing utilities\npnpm add --save-dev jest                         # Test runner\npnpm add --save-dev @types/jest                  # TypeScript definitions\n","children":["$","$L5",null,{"className":"language-sh","children":"$6"}],"title":"pnpm"}],["$","$L4",null,{"language":"sh","code":"npm install --save-dev @nestjs-cognito/testing      # NestJS Cognito testing utilities\nnpm install --save-dev @nestjs/testing              # NestJS testing utilities\nnpm install --save-dev jest                         # Test runner\nnpm install --save-dev @types/jest                  # TypeScript definitions\n","children":["$","$L5",null,{"className":"language-sh","children":"$7"}],"title":"npm"}],["$","$L4",null,{"language":"sh","code":"yarn add --dev @nestjs-cognito/testing      # NestJS Cognito testing utilities\nyarn add --dev @nestjs/testing              # NestJS testing utilities\nyarn add --dev jest                         # Test runner\nyarn add --dev @types/jest                  # TypeScript definitions\n","children":["$","$L5",null,{"className":"language-sh","children":"$8"}],"title":"yarn"}]]}],"\n",["$","$L2",null,{"level":2,"id":"http-testing-with-pactum","children":"HTTP Testing with Pactum"}],"\n",["$","p",null,{"children":"Pactum is a HTTP testing toolkit that makes it easy to test NestJS Cognito authentication endpoints."}],"\n",["$","$L3",null,{"children":[["$","$L4",null,{"language":"sh","code":"pnpm add --save-dev pactum    # HTTP testing toolkit\n","children":["$","$L5",null,{"className":"language-sh","children":"<span><span style=\"color: var(--shiki-token-function)\">pnpm</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">add</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">--save-dev</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">pactum</span><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-comment)\"># HTTP testing toolkit</span></span>\n<span></span>"}],"title":"pnpm"}],["$","$L4",null,{"language":"sh","code":"npm install --save-dev pactum   # HTTP testing toolkit\n","children":["$","$L5",null,{"className":"language-sh","children":"<span><span style=\"color: var(--shiki-token-function)\">npm</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">install</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">--save-dev</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">pactum</span><span style=\"color: var(--shiki-color-text)\">   </span><span style=\"color: var(--shiki-token-comment)\"># HTTP testing toolkit</span></span>\n<span></span>"}],"title":"npm"}],["$","$L4",null,{"language":"sh","code":"yarn add --dev pactum   # HTTP testing toolkit\n","children":["$","$L5",null,{"className":"language-sh","children":"<span><span style=\"color: var(--shiki-token-function)\">yarn</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">add</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">--dev</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">pactum</span><span style=\"color: var(--shiki-color-text)\">   </span><span style=\"color: var(--shiki-token-comment)\"># HTTP testing toolkit</span></span>\n<span></span>"}],"title":"yarn"}]]}],"\n",["$","h3",null,{"children":"Setting Up Pactum"}],"\n",["$","$L4",null,{"language":"typescript","code":"import { handler, request, spec } from \"pactum\";\nimport { Test } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\n\ndescribe('Auth Tests', () => {\n  let app: INestApplication;\n\n  beforeAll(async () => {\n    const moduleRef = await Test.createTestingModule({\n      imports: [AppModule],\n    }).compile();\n\n    app = moduleRef.createNestApplication();\n    await app.init();\n\n    // Configure Pactum to use the NestJS application\n    request.setBaseUrl(`http://localhost:${process.env.PORT || 3000}`);\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n});\n","children":["$","$L5",null,{"className":"language-typescript","children":"$9"}]}],"\n",["$","$L2",null,{"level":2,"id":"real-e2-e-testing","children":"Real E2E Testing"}],"\n",["$","p",null,{"children":"Real E2E testing allows you to validate your application against actual AWS Cognito services, ensuring production-ready authentication flows."}],"\n",["$","$L4",null,{"language":"typescript","code":"import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { CognitoTestingModule } from '@nestjs-cognito/testing';\nimport { CognitoAuthModule } from '@nestjs-cognito/auth';\n\n@Module({\n  imports: [\n    // Configure auth module with environment variables\n    CognitoAuthModule.registerAsync({\n      imports: [ConfigModule.forRoot()],\n      useFactory: (config: ConfigService) => ({\n        jwtVerifier: {\n          userPoolId: config.get('COGNITO_USER_POOL_ID'),\n          clientId: config.get('COGNITO_CLIENT_ID'),\n          tokenUse: 'id',\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    // Configure testing module with AWS credentials\n    CognitoTestingModule.registerAsync({\n      imports: [ConfigModule.forRoot()],\n      useFactory: (config: ConfigService) => ({\n        identityProvider: {\n          region: config.get('COGNITO_REGION'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n})\nexport class TestModule {}\n","children":["$","$L5",null,{"className":"language-typescript","children":"$a"}]}],"\n",["$","$L2",null,{"level":2,"id":"mock-testing","children":"Mock Testing"}],"\n",["$","p",null,{"children":["Mock testing is useful during development and CI/CD pipelines where real AWS Cognito services are not available or desired. Note that you must provide the mock configuration as the second argument to ",["$","$L5",null,{"children":"CognitoTestingModule.register()"}]," and explicitly enable mock mode."]}],"\n",["$","$L4",null,{"language":"typescript","code":"import { COGNITO_JWT_VERIFIER_INSTANCE_TOKEN } from '@nestjs-cognito/core';\nimport { CognitoTestingModule } from '@nestjs-cognito/testing';\nimport { Test } from \"@nestjs/testing\";\nimport { handler, request, spec } from \"pactum\";\n\ndescribe('Auth Tests', () => {\n  let app: INestApplication;\n\n  beforeAll(async () => {\n    const moduleFixture = await Test.createTestingModule({\n      imports: [\n        CognitoTestingModule.register({}, {\n          enabled: true, // Enable mock mode\n          user: {\n            username: 'test-user',\n            email: 'test@example.com',\n            groups: ['users'],\n          },\n        }),\n        AppModule,\n      ],\n    })\n      .overrideProvider(COGNITO_JWT_VERIFIER_INSTANCE_TOKEN)\n      .useFactory({\n        factory: CognitoTestingModule.createJwtVerifierFactory\n      })\n      .compile();\n\n    app = moduleFixture.createNestApplication();\n    await app.init();\n  });\n});\n","children":["$","$L5",null,{"className":"language-typescript","children":"$b"}]}],"\n",["$","$L2",null,{"level":2,"id":"testing-scenarios","children":"Testing Scenarios"}],"\n",["$","h3",null,{"children":"Authentication Testing"}],"\n",["$","$L4",null,{"language":"typescript","code":"// Test authentication using mock service\nconst response = await request(app.getHttpServer())\n  .post('/cognito-testing-login')\n  .send({\n    username: 'test-user',\n    password: 'any-password', // Password is not validated in mock mode\n    clientId: 'mock-client-id'\n  })\n  .expect(200);\n\n// Test protected routes\nawait request(app.getHttpServer())\n  .get('/protected')\n  .set('Authorization', `Bearer ${response.body.AccessToken}`)\n  .expect(200)\n  .expect({\n    username: 'test-user',\n    email: 'test@example.com',\n    groups: ['users'],\n  });\n","children":["$","$L5",null,{"className":"language-typescript","children":"$c"}]}],"\n",["$","h3",null,{"children":"Authorization Testing"}],"\n",["$","$L4",null,{"language":"typescript","code":"// Test group-based authorization\ndescribe('Authorization Tests', () => {\n  it('should allow access to authorized group members', async () => {\n    // Configure mock user with specific group\n    await request(app.getHttpServer())\n      .post('/config')\n      .send({\n        enabled: true,\n        user: {\n          username: 'admin-user',\n          email: 'admin@example.com',\n          groups: ['admin'],\n        },\n      })\n      .expect(200);\n\n    // Login and get token\n    const loginResponse = await request(app.getHttpServer())\n      .post('/cognito-testing-login')\n      .send({\n        username: 'admin@example.com',\n        password: 'password',\n        clientId: 'test-client',\n      })\n      .expect(200);\n\n    // Test protected route access\n    await request(app.getHttpServer())\n      .get('/admin/dashboard')\n      .set('Authorization', `Bearer ${loginResponse.body.AccessToken}`)\n      .expect(200);\n  });\n});\n","children":["$","$L5",null,{"className":"language-typescript","children":"$d"}]}],"\n",["$","h3",null,{"children":"Authentication Testing"}],"\n",["$","$L4",null,{"language":"typescript","code":"// Test authentication using mock service\nconst response = await request(app.getHttpServer())\n  .post('/cognito-testing-login')\n  .send({\n    username: 'test-user',\n    password: 'any-password', // Password is not validated in mock mode\n    clientId: 'mock-client-id'\n  })\n  .expect(200);\n\n// Test protected routes\nawait request(app.getHttpServer())\n  .get('/protected')\n  .set('Authorization', `Bearer ${response.body.AccessToken}`)\n  .expect(200)\n  .expect({\n    username: 'test-user',\n    email: 'test@example.com',\n    groups: ['users'],\n  });\n","children":["$","$L5",null,{"className":"language-typescript","children":"$e"}]}],"\n",["$","h3",null,{"children":"Authorization Testing"}],"\n",["$","$L4",null,{"language":"typescript","code":"// Test group-based authorization\ndescribe('Authorization Tests', () => {\n  it('should allow access to authorized group members', async () => {\n    // Configure mock user with specific group\n    await request(app.getHttpServer())\n      .post('/config')\n      .send({\n        enabled: true,\n        user: {\n          username: 'admin-user',\n          email: 'admin@example.com',\n          groups: ['admin'],\n        },\n      })\n      .expect(200);\n\n    // Login and get token\n    const loginResponse = await request(app.getHttpServer())\n      .post('/cognito-testing-login')\n      .send({\n        username: 'admin@example.com',\n        password: 'password',\n        clientId: 'test-client',\n      })\n      .expect(200);\n\n    // Test protected route access\n    await request(app.getHttpServer())\n      .get('/admin/dashboard')\n      .set('Authorization', `Bearer ${loginResponse.body.AccessToken}`)\n      .expect(200);\n  });\n});\n","children":["$","$L5",null,{"className":"language-typescript","children":"$f"}]}],"\n",["$","$L2",null,{"level":2,"id":"advanced-testing","children":"Advanced Testing"}],"\n",["$","h3",null,{"children":"Dynamic User Configuration"}],"\n",["$","p",null,{"children":"Update mock settings during test execution:"}],"\n",["$","$L4",null,{"language":"typescript","code":"await request(app.getHttpServer())\n  .post('/config')\n  .send({\n    user: {\n      username: 'new-user',\n      email: 'new@example.com',\n      groups: ['admin'],\n    },\n  })\n  .expect(200);\n","children":["$","$L5",null,{"className":"language-typescript","children":"$10"}]}],"\n",["$","h3",null,{"children":"Testing Different Token Types"}],"\n",["$","$L4",null,{"language":"typescript","code":"describe('Token Type Tests', () => {\n  it('should validate ID tokens', async () => {\n    const response = await request(app.getHttpServer())\n      .post('/cognito-testing-login')\n      .send({\n        username: 'test@example.com',\n        password: 'password',\n        clientId: 'test-client',\n      })\n      .expect(200);\n\n    await request(app.getHttpServer())\n      .get('/protected')\n      .set('Authorization', `Bearer ${response.body.IdToken}`)\n      .expect(200);\n  });\n\n  it('should validate access tokens', async () => {\n    const response = await request(app.getHttpServer())\n      .post('/cognito-testing-login')\n      .send({\n        username: 'test@example.com',\n        password: 'password',\n        clientId: 'test-client',\n      })\n      .expect(200);\n\n    await request(app.getHttpServer())\n      .get('/protected')\n      .set('Authorization', `Bearer ${response.body.AccessToken}`)\n      .expect(200);\n  });\n});\n","children":["$","$L5",null,{"className":"language-typescript","children":"$11"}]}]]}],["$","footer",null,{"className":"mx-auto mt-16 w-full max-w-2xl lg:max-w-5xl"}]]}],null],null],null]},[null,["$","$L12",null,{"parallelRouterKey":"children","segmentPath":["children","guides","children","testing","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L13",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L12",null,{"parallelRouterKey":"children","segmentPath":["children","guides","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L13",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/nestjs-cognito/_next/static/css/7f0c2e5300d2e547.css","precedence":"next","crossOrigin":"$undefined"}]],"$L14"],null],null],["$L15",null]]]]
15:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Testing - NestJS Cognito - NestJS-Cognito"}],["$","meta","3",{"name":"description","content":"Learn how to implement E2E testing with NestJS-Cognito using real and mocked scenarios."}],["$","link","4",{"rel":"icon","href":"/favicon.ico"}]]
1:null
16:I[6639,["727","static/chunks/727-307d6dc754c23268.js","985","static/chunks/985-728f8f965d873ae2.js","384","static/chunks/384-9c61028d6b9f3d71.js","802","static/chunks/802-794afc6f7dd2dd66.js","185","static/chunks/app/layout-962d22ed320370d7.js"],"Providers"]
17:I[9179,["727","static/chunks/727-307d6dc754c23268.js","985","static/chunks/985-728f8f965d873ae2.js","384","static/chunks/384-9c61028d6b9f3d71.js","802","static/chunks/802-794afc6f7dd2dd66.js","185","static/chunks/app/layout-962d22ed320370d7.js"],"Layout"]
18:I[9727,["727","static/chunks/727-307d6dc754c23268.js","985","static/chunks/985-728f8f965d873ae2.js","802","static/chunks/802-794afc6f7dd2dd66.js","823","static/chunks/app/guides/testing/page-ca37cbdc92f6871b.js"],""]
14:["$","html",null,{"lang":"en","className":"h-full","suppressHydrationWarning":true,"children":["$","body",null,{"className":"flex min-h-full bg-white antialiased dark:bg-zinc-900","children":["$","$L16",null,{"children":["$","div",null,{"className":"w-full","children":["$","$L17",null,{"allSections":{"/":[{"title":"Features","id":"features"},{"title":"Why NestJS-Cognito?","id":"why-nest-js-cognito"}],"/credits":[{"title":"Icons and Visual Assets","id":"icons-and-visual-assets"}],"/quickstart":[{"title":"Installation","id":"installation"},{"title":"Basic Setup","id":"basic-setup"},{"title":"Basic Usage","id":"basic-usage"}],"/api/core-package":[{"title":"Installation","id":"installation"},{"title":"Package Architecture","id":"package-architecture"},{"title":"Basic Usage","id":"basic-usage"},{"title":"Integration with Other Packages","id":"integration-with-other-packages"}],"/api/integration":[{"title":"Common Integration Patterns","id":"common-integration-patterns"},{"title":"Module Integration Examples","id":"module-integration-examples"}],"/api/jwt-verification":[{"title":"JWT Claims Verification","id":"jwt-claims-verification"},{"title":"Cognito JWT Verification","id":"cognito-jwt-verification"},{"title":"RSA JWT Verification","id":"rsa-jwt-verification"}],"/api/module-configuration":[{"title":"Async Configuration","id":"async-configuration"},{"title":"Module Options","id":"module-options"},{"title":"Basic Configuration","id":"basic-configuration"},{"title":"Identity Provider Configuration","id":"identity-provider-configuration"},{"title":"JWT Verification Configuration","id":"jwt-verification-configuration"},{"title":"JWK Cache Configuration","id":"jwk-cache-configuration"},{"title":"Important Notes","id":"important-notes"}],"/guides/authentication":[{"title":"Overview","id":"overview"},{"title":"Basic Setup","id":"basic-setup"},{"title":"Using @Authentication Decorator","id":"using-authentication-decorator"},{"title":"Public Routes","id":"public-routes"},{"title":"Token Verification","id":"token-verification"}],"/guides/authorization":[{"title":"Basic Authorization","id":"basic-authorization"},{"title":"Advanced Rules","id":"advanced-rules"},{"title":"Best Practices","id":"best-practices"}],"/guides/cognito-user":[{"title":"Overview","id":"overview"},{"title":"Usage Patterns","id":"usage-patterns"},{"title":"Available Properties","id":"available-properties"}],"/guides/custom-guards":[{"title":"Understanding AbstractGuard","id":"understanding-abstract-guard"},{"title":"Creating a Custom Guard","id":"creating-a-custom-guard"},{"title":"Using the Custom Guard","id":"using-the-custom-guard"},{"title":"Guard Inheritance Flow","id":"guard-inheritance-flow"},{"title":"Best Practices","id":"best-practices"}],"/guides/graphql":[{"title":"Installation","id":"installation"},{"title":"Basic Setup","id":"basic-setup"},{"title":"Authentication","id":"authentication"},{"title":"Authorization","id":"authorization"},{"title":"User Information","id":"user-information"}],"/guides/public-route":[{"title":"Overview","id":"overview"},{"title":"Basic Usage","id":"basic-usage"},{"title":"How It Works","id":"how-it-works"},{"title":"Token Validation Priority","id":"token-validation-priority"},{"title":"Use Cases","id":"use-cases"},{"title":"Common Patterns","id":"common-patterns"}],"/guides/testing":[{"title":"Getting Started with Testing","id":"getting-started-with-testing"},{"title":"HTTP Testing with Pactum","id":"http-testing-with-pactum"},{"title":"Real E2E Testing","id":"real-e2-e-testing"},{"title":"Mock Testing","id":"mock-testing"},{"title":"Testing Scenarios","id":"testing-scenarios"},{"title":"Advanced Testing","id":"advanced-testing"}],"/guides/websocket":[{"title":"Overview","id":"overview"},{"title":"Implementation","id":"implementation"}]},"children":["$","$L12",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L13",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"mx-auto flex h-full max-w-xl flex-col items-center justify-center py-16 text-center","children":[["$","p",null,{"className":"text-sm font-semibold text-zinc-900 dark:text-white","children":"404"}],["$","h1",null,{"className":"mt-2 text-2xl font-bold text-zinc-900 dark:text-white","children":"Page not found"}],["$","p",null,{"className":"mt-2 text-base text-zinc-600 dark:text-zinc-400","children":"Sorry, we couldn’t find the page you’re looking for."}],["$","$L18",null,{"className":"inline-flex gap-0.5 justify-center overflow-hidden text-sm font-medium transition rounded-full bg-zinc-900 py-1 px-3 text-white hover:bg-zinc-700 dark:bg-emerald-400/10 dark:text-emerald-400 dark:ring-1 dark:ring-inset dark:ring-emerald-400/20 dark:hover:bg-emerald-400/10 dark:hover:text-emerald-300 dark:hover:ring-emerald-300 mt-8","href":"/","children":[false,"Back to docs",["$","svg",null,{"viewBox":"0 0 20 20","fill":"none","aria-hidden":"true","className":"mt-0.5 h-5 w-5 -mr-1","children":["$","path",null,{"stroke":"currentColor","strokeLinecap":"round","strokeLinejoin":"round","d":"m11.5 6.5 3 3.5m0 0-3 3.5m3-3.5h-9"}]}]]}]]}],"notFoundStyles":[]}]}]}]}]}]}]
